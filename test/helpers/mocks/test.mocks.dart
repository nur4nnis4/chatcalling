// Mocks generated by Mockito 5.2.0 from annotations
// in chatcalling/test/helpers/mocks/test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:chatcalling/core/error/failures.dart' as _i5;
import 'package:chatcalling/core/network/network_info.dart' as _i15;
import 'package:chatcalling/core/user/domain/entities/user.dart' as _i6;
import 'package:chatcalling/core/user/domain/entities/user_private_data.dart'
    as _i7;
import 'package:chatcalling/core/user/domain/repositories/user_repository.dart'
    as _i3;
import 'package:chatcalling/features/messages/data/datasources/message_local_datasource.dart'
    as _i14;
import 'package:chatcalling/features/messages/data/datasources/message_remote_datasource.dart'
    as _i11;
import 'package:chatcalling/features/messages/data/models/conversation_model.dart'
    as _i13;
import 'package:chatcalling/features/messages/data/models/message_model.dart'
    as _i12;
import 'package:chatcalling/features/messages/domain/entities/conversation.dart'
    as _i10;
import 'package:chatcalling/features/messages/domain/entities/message.dart'
    as _i9;
import 'package:chatcalling/features/messages/domain/repositories/message_repository.dart'
    as _i8;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> getUserData(String? userId) =>
      (super.noSuchMethod(Invocation.method(#getUserData, [userId]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.User>>.value(
                  _FakeEither_0<_i5.Failure, _i6.User>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.UserPrivateData>> getUserPrivateData(
          String? userId) =>
      (super.noSuchMethod(Invocation.method(#getUserPrivateData, [userId]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, _i7.UserPrivateData>>.value(
                      _FakeEither_0<_i5.Failure, _i7.UserPrivateData>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i7.UserPrivateData>>);
}

/// A class which mocks [MessageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageRepository extends _i1.Mock implements _i8.MessageRepository {
  MockMessageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i9.Message>>> getMessages(
          String? conversationId) =>
      (super.noSuchMethod(Invocation.method(#getMessages, [conversationId]),
          returnValue: Future<_i2.Either<_i5.Failure, List<_i9.Message>>>.value(
              _FakeEither_0<_i5.Failure, List<_i9.Message>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i9.Message>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> sendMessage(_i9.Message? message) =>
      (super.noSuchMethod(Invocation.method(#sendMessage, [message]),
              returnValue: Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither_0<_i5.Failure, void>()))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i10.Conversation>>> getConversations(
          String? userId) =>
      (super.noSuchMethod(Invocation.method(#getConversations, [userId]),
          returnValue:
              Future<_i2.Either<_i5.Failure, List<_i10.Conversation>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i10.Conversation>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i10.Conversation>>>);
}

/// A class which mocks [MessageRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageRemoteDatasource extends _i1.Mock
    implements _i11.MessageRemoteDatasource {
  MockMessageRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i12.MessageModel>> getMessages(String? conversationId) =>
      (super.noSuchMethod(Invocation.method(#getMessages, [conversationId]),
              returnValue:
                  Future<List<_i12.MessageModel>>.value(<_i12.MessageModel>[]))
          as _i4.Future<List<_i12.MessageModel>>);
  @override
  _i4.Future<void> sendMessage(_i12.MessageModel? message) =>
      (super.noSuchMethod(Invocation.method(#sendMessage, [message]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i13.ConversationModel>> getConversations(String? userId) =>
      (super.noSuchMethod(Invocation.method(#getConversations, [userId]),
              returnValue: Future<List<_i13.ConversationModel>>.value(
                  <_i13.ConversationModel>[]))
          as _i4.Future<List<_i13.ConversationModel>>);
}

/// A class which mocks [MessageLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageLocalDatasource extends _i1.Mock
    implements _i14.MessageLocalDatasource {
  MockMessageLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i12.MessageModel>> getMessages() =>
      (super.noSuchMethod(Invocation.method(#getMessages, []),
              returnValue:
                  Future<List<_i12.MessageModel>>.value(<_i12.MessageModel>[]))
          as _i4.Future<List<_i12.MessageModel>>);
  @override
  _i4.Future<void> cacheMessages(List<_i12.MessageModel>? messagesToCache) =>
      (super.noSuchMethod(Invocation.method(#cacheMessages, [messagesToCache]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i13.ConversationModel>> getConversations() =>
      (super.noSuchMethod(Invocation.method(#getConversations, []),
              returnValue: Future<List<_i13.ConversationModel>>.value(
                  <_i13.ConversationModel>[]))
          as _i4.Future<List<_i13.ConversationModel>>);
  @override
  _i4.Future<void> cacheConversations(
          List<_i13.ConversationModel>? conversationsToCache) =>
      (super.noSuchMethod(
          Invocation.method(#cacheConversations, [conversationsToCache]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i15.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
